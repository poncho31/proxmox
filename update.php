<?php
#!/usr/bin/env php

/**
 * Script de mise √† jour Proxmox LXC - Serveur Web PHP
 * Acc√®s: https://192.168.0.50/
 */

set_time_limit(60);

// ========================================
// TABLEAU DES OP√âRATIONS
// ========================================

$operations = [
    'initial_check' => [
        'description' => 'Diagnostic initial du syst√®me',
        'command' => 'initialSystemCheck',
        'success_message' => 'Diagnostic initial termin√©',
        'error_message' => 'Probl√®me diagnostic initial'
    ],
    'system_update' => [
        'description' => 'Mise √† jour des paquets syst√®me',
        'command' => 'apt update && apt upgrade -y',
        'success_message' => 'Syst√®me mis √† jour avec succ√®s',
        'error_message' => 'Erreur lors de la mise √† jour syst√®me'
    ],
    'install_dependencies' => [
        'description' => 'Installation des d√©pendances requises',
        'command' => 'apt install -y nginx php8.2-fpm php8.2-common php8.2-mysql php8.2-xml php8.2-xmlrpc php8.2-curl php8.2-gd php8.2-imagick php8.2-cli php8.2-dev php8.2-imap php8.2-mbstring php8.2-opcache php8.2-soap php8.2-zip openssl curl',
        'success_message' => 'D√©pendances Nginx/PHP install√©es avec succ√®s',
        'error_message' => 'Erreur lors de l\'installation des d√©pendances'
    ],
    'configure_ip' => [
        'description' => 'Configuration de l\'IP 192.168.0.50',
        'command' => 'configureProxmoxIP',
        'success_message' => 'IP 192.168.0.50 configur√©e',
        'error_message' => 'Erreur configuration IP'
    ],

    'configure_nginx' => [
        'description' => 'Configuration Nginx HTTP pour 192.168.0.50',
        'command' => 'configureNginx',
        'success_message' => 'Configuration Nginx HTTP appliqu√©e',
        'error_message' => 'Erreur configuration Nginx'
    ],
    'fix_permissions' => [
        'description' => 'Correction des permissions',
        'command' => 'chown -R www-data:www-data /var/www/html && chmod -R 755 /var/www/html',
        'success_message' => 'Permissions corrig√©es',
        'error_message' => 'Erreur correction permissions'
    ],
    'restart_php' => [
        'description' => 'Red√©marrage PHP-FPM',
        'command' => 'systemctl restart php8.2-fpm && systemctl enable php8.2-fpm',
        'success_message' => 'PHP-FPM red√©marr√© et activ√©',
        'error_message' => 'Erreur red√©marrage PHP-FPM'
    ],
    'restart_nginx' => [
        'description' => 'Red√©marrage Nginx',
        'command' => 'systemctl restart nginx && systemctl enable nginx',
        'success_message' => 'Nginx red√©marr√© et activ√©',
        'error_message' => 'Erreur red√©marrage Nginx'
    ],
    'test_connectivity' => [
        'description' => 'Test de connectivit√© finale',
        'command' => 'testConnectivity',
        'success_message' => 'Tests de connectivit√© r√©ussis',
        'error_message' => 'Probl√®me de connectivit√© d√©tect√©'
    ],

];

// ========================================
// FONCTIONS UTILITAIRES
// ========================================

function execCommand($command) {
    $output = [];
    $returnCode = 0;
    exec($command . " 2>&1", $output, $returnCode);
    return [
        'success' => $returnCode === 0,
        'output' => implode("\n", $output),
        'code' => $returnCode
    ];
}

function printStatus($message, $success = true) {
    $color = $success ? "\033[32m" : "\033[31m";
    $reset = "\033[0m";
    echo $color . $message . $reset . "\n";
}

function printInfo($message) {
    echo "\033[34m" . $message . "\033[0m\n";
}

// ========================================
// EX√âCUTION PRINCIPALE
// ========================================

echo "üöÄ MISE √Ä JOUR SERVEUR PROXMOX LXC\n";
echo "===================================\n";
echo "üåê Configuration pour: http://192.168.0.50/\n\n";

$successful = 0;
$failed = 0;

$stepNum = 0;
foreach ($operations as $operationKey => $operation) {
    $stepNum++;
    printInfo("[$stepNum/" . count($operations) . "] [$operationKey] " . $operation['description'] . "...");
    
    // Ex√©cuter la commande
    if (function_exists($operation['command'])) {
        $result = call_user_func($operation['command']);
    } else {
        $result = execCommand($operation['command']);
    }
    
    if ($result['success']) {
        printStatus("‚úÖ " . $operation['success_message']);
        $successful++;
        
        // Afficher sortie si pertinente
        if (!empty($result['output']) && 
            !in_array(trim($result['output']), ['', 'OK', 'Done'])) {
            echo "   " . trim($result['output']) . "\n";
        }
    } else {
        printStatus("‚ùå " . $operation['error_message'], false);
        $failed++;
        
        if (!empty($result['output'])) {
            echo "   Erreur: " . trim($result['output']) . "\n";
        }
        
        // Optionnel: arr√™ter en cas d'erreur critique
        if (in_array($operationKey, ['system_update', 'install_dependencies'])) {
            printStatus("‚ö†Ô∏è Erreur critique d√©tect√©e, arr√™t du processus", false);
            break;
        }
    }
    
    echo "\n";
}

// ========================================
// R√âSUM√â FINAL
// ========================================

echo "===================================\n";
echo "üìä R√âSUM√â: $successful r√©ussies / $failed √©chou√©es\n";
echo "===================================\n";

if ($failed === 0) {
    printStatus("üéâ MISE √Ä JOUR TERMIN√âE AVEC SUCC√àS !");
    echo "\nüåê Serveur accessible sur: http://192.168.0.50/\n";
    echo "üìù Todo List sur: http://192.168.0.50:8080/\n";
    echo "\nüí° Commandes utiles:\n";
    echo "   - systemctl status nginx php8.2-fpm\n";
    echo "   - curl http://192.168.0.50/\n";
    echo "   - nginx -t (test config)\n";
} else {
    printStatus("‚ö†Ô∏è MISE √Ä JOUR PARTIELLEMENT R√âUSSIE", false);
    echo "\nüîß V√©rifiez les erreurs et relancez si n√©cessaire\n";
}

exit($failed > 0 ? 1 : 0);

// ========================================
// FONCTIONS COMPLEXES
// ========================================

function initialSystemCheck() {
    echo "=== DIAGNOSTIC INITIAL SYST√àME ===\n";
    
    // V√©rifier l'OS
    $os = execCommand('cat /etc/os-release | grep PRETTY_NAME');
    echo "Syst√®me: " . trim(str_replace('PRETTY_NAME=', '', str_replace('"', '', $os['output']))) . "\n";
    
    // V√©rifier les services
    $nginx = execCommand('systemctl is-active nginx');
    $php = execCommand('systemctl is-active php8.2-fpm');
    echo "Nginx: " . ($nginx['success'] ? "‚úÖ ACTIF" : "‚ùå INACTIF") . "\n";
    echo "PHP-FPM: " . ($php['success'] ? "‚úÖ ACTIF" : "‚ùå INACTIF") . "\n";
    
    // V√©rifier la configuration Nginx actuelle
    $nginxTest = execCommand('nginx -t');
    echo "Config Nginx: " . ($nginxTest['success'] ? "‚úÖ VALIDE" : "‚ùå ERREURS") . "\n";
    
    if (!$nginxTest['success']) {
        echo "Erreurs Nginx actuelles:\n" . $nginxTest['output'] . "\n";
    }
    
    // V√©rifier les interfaces r√©seau
    $interfaces = execCommand('ip addr show | grep "inet " | grep -v "127.0.0.1"');
    echo "Interfaces r√©seau:\n" . trim($interfaces['output']) . "\n";
    
    // V√©rifier si 192.168.0.50 est d√©j√† configur√©e
    $checkIP = execCommand('ip addr show | grep "192.168.0.50"');
    echo "IP 192.168.0.50: " . (!empty($checkIP['output']) ? "‚úÖ D√âJ√Ä CONFIGUR√âE" : "‚ùå √Ä CONFIGURER") . "\n";
    
    // V√©rifier les ports en √©coute
    $ports = execCommand('ss -tlnp | grep ":80\|:8080"');
    echo "Ports 80/8080 en √©coute:\n" . ($ports['output'] ?: "Aucun port en √©coute") . "\n";
    
    // V√©rifier si le fichier de config existe
    $configFile = '/var/www/html/php/config/nginx.conf';
    echo "Fichier config nginx.conf: " . (file_exists($configFile) ? "‚úÖ EXISTE" : "‚ùå MANQUANT") . "\n";
    
    return ['success' => true, 'output' => 'Diagnostic syst√®me effectu√©'];
}

function configureProxmoxIP() {
    echo "=== CONFIGURATION IP 192.168.0.50 ===\n";
    
    // Afficher les interfaces actuelles
    $interfaces = execCommand('ip addr show | grep "inet " | grep -v "127.0.0.1"');
    echo "Interfaces actuelles:\n" . $interfaces['output'] . "\n";
    
    // V√©rifier si l'IP existe d√©j√†
    $checkIP = execCommand('ip addr show | grep "192.168.0.50"');
    if (!empty($checkIP['output'])) {
        echo "IP 192.168.0.50 d√©j√† configur√©e\n";
        return ['success' => true, 'output' => 'IP 192.168.0.50 d√©j√† configur√©e'];
    }
    
    // D√©tecter l'interface r√©seau principale
    $interface = execCommand('ip route | grep default | awk \'{print $5}\' | head -1');
    $iface = trim($interface['output']);
    
    if (empty($iface)) {
        // Essayer de d√©tecter eth0 ou la premi√®re interface
        $firstIface = execCommand('ip link show | grep "^[0-9]" | grep -v "lo:" | head -1 | awk -F": " \'{print $2}\'');
        $iface = trim($firstIface['output']);
        if (empty($iface)) {
            $iface = 'eth0'; // D√©faut
        }
    }
    
    echo "Interface d√©tect√©e: $iface\n";
    
    // Tentatives d'ajout de l'IP avec diff√©rentes m√©thodes
    $methods = [
        "ip addr add 192.168.0.50/24 dev $iface",
        "ip addr add 192.168.0.50/32 dev $iface",
        "ifconfig $iface:1 192.168.0.50 netmask 255.255.255.0"
    ];
    
    foreach ($methods as $method) {
        echo "Essai: $method\n";
        $result = execCommand($method);
        
        // V√©rifier si l'ajout a r√©ussi
        $verify = execCommand('ip addr show | grep "192.168.0.50"');
        if (!empty($verify['output'])) {
            echo "‚úÖ IP 192.168.0.50 ajout√©e avec succ√®s\n";
            return ['success' => true, 'output' => "IP 192.168.0.50 ajout√©e sur $iface"];
        }
        
        if (!$result['success'] && !strpos($result['output'], 'File exists')) {
            echo "√âchec: " . $result['output'] . "\n";
        }
    }
    
    // Si toutes les m√©thodes √©chouent, donner des instructions
    echo "‚ö†Ô∏è Impossible d'ajouter automatiquement l'IP 192.168.0.50\n";
    echo "üìù Instructions manuelles:\n";
    echo "1. Dans Proxmox Web UI > Container > Network\n";
    echo "2. Ajouter une IP statique: 192.168.0.50/24\n";
    echo "3. Ou dans le conteneur: ip addr add 192.168.0.50/24 dev $iface\n";
    
    return ['success' => false, 'output' => 'Configuration manuelle requise pour IP 192.168.0.50'];
}



function configureNginx() {
    echo "=== CONFIGURATION NGINX HTTP ===\n";
    
    // Localiser le fichier de config du projet
    $projectConfigPath = '/var/www/html/php/config/nginx.conf';
    $systemConfigPath = '/etc/nginx/nginx.conf';
    
    // V√©rifier si le fichier de config du projet existe
    if (!file_exists($projectConfigPath)) {
        return ['success' => false, 'output' => "Fichier config introuvable: $projectConfigPath"];
    }
    
    echo "Fichier config trouv√©: ‚úÖ\n";
    
    // Sauvegarder la config syst√®me actuelle
    $backup = execCommand("cp $systemConfigPath $systemConfigPath.backup");
    echo "Sauvegarde config syst√®me: " . ($backup['success'] ? "‚úÖ" : "‚ùå") . "\n";
    
    // Copier la config du projet vers le syst√®me
    $copy = execCommand("cp $projectConfigPath $systemConfigPath");
    if (!$copy['success']) {
        return ['success' => false, 'output' => "Impossible de copier la config: " . $copy['output']];
    }
    echo "Config copi√©e: ‚úÖ\n";
    
    // Tester la configuration
    $test = execCommand('nginx -t');
    echo "Test syntaxe: " . ($test['success'] ? "‚úÖ" : "‚ùå") . "\n";
    
    if (!$test['success']) {
        echo "Erreur syntaxe:\n" . $test['output'] . "\n";
        // Restaurer la sauvegarde
        execCommand("cp $systemConfigPath.backup $systemConfigPath");
        return ['success' => false, 'output' => 'Configuration Nginx invalide: ' . $test['output']];
    }
    
    // V√©rifier/cr√©er les r√©pertoires web
    $webDir = '/var/www/html/php/public';
    $checkDir = execCommand("ls -la $webDir");
    echo "R√©pertoire web: " . ($checkDir['success'] ? "‚úÖ" : "‚ùå") . "\n";
    
    if (!$checkDir['success']) {
        echo "Cr√©ation r√©pertoire web...\n";
        execCommand("mkdir -p $webDir");
        
        // Cr√©er un fichier index simple pour test
        $indexContent = '<?php
echo "<h1>üöÄ Serveur Proxmox HTTP</h1>";
echo "<p>‚úÖ Serveur fonctionnel sur: " . $_SERVER["HTTP_HOST"] . "</p>";
echo "<p>üïê Heure: " . date("Y-m-d H:i:s") . "</p>";
echo "<hr>";
echo "<h3>üìã Informations PHP</h3>";
phpinfo();
?>';
        file_put_contents("$webDir/index.php", $indexContent);
        echo "Fichier index.php cr√©√©: ‚úÖ\n";
        
        // Cr√©er un fichier pour proxmox_main_web_server.php s'il n'existe pas
        if (!file_exists("$webDir/proxmox_main_web_server.php")) {
            $mainContent = '<?php
echo "<h1>üåê Proxmox Main Web Server</h1>";
echo "<p>Serveur principal fonctionnel</p>";
echo "<p>IP: " . $_SERVER["SERVER_ADDR"] . "</p>";
echo "<p>Host: " . $_SERVER["HTTP_HOST"] . "</p>";
?>';
            file_put_contents("$webDir/proxmox_main_web_server.php", $mainContent);
            echo "Fichier proxmox_main_web_server.php cr√©√©: ‚úÖ\n";
        }
    }
    
    return ['success' => true, 'output' => 'Configuration Nginx HTTP appliqu√©e depuis config/nginx.conf'];
}

function testConnectivity() {
    echo "=== TESTS DE CONNECTIVIT√â FINAUX ===\n";
    
    // V√©rifier l'√©tat des services
    $nginxStatus = execCommand('systemctl is-active nginx');
    $phpStatus = execCommand('systemctl is-active php8.2-fpm');
    echo "√âtat services:\n";
    echo "  - Nginx: " . ($nginxStatus['success'] ? "‚úÖ ACTIF" : "‚ùå INACTIF") . "\n";
    echo "  - PHP-FPM: " . ($phpStatus['success'] ? "‚úÖ ACTIF" : "‚ùå INACTIF") . "\n";
    
    // V√©rifier la config Nginx
    $nginxTest = execCommand('nginx -t');
    echo "  - Config Nginx: " . ($nginxTest['success'] ? "‚úÖ VALIDE" : "‚ùå ERREURS") . "\n";
    
    // V√©rifier les ports en √©coute
    $ports80 = execCommand('ss -tlnp | grep ":80 "');
    $ports8080 = execCommand('ss -tlnp | grep ":8080 "');
    echo "Ports en √©coute:\n";
    echo "  - Port 80: " . (!empty($ports80['output']) ? "‚úÖ OUVERT" : "‚ùå FERM√â") . "\n";
    echo "  - Port 8080: " . (!empty($ports8080['output']) ? "‚úÖ OUVERT" : "‚ùå FERM√â") . "\n";
    
    // V√©rifier IP 192.168.0.50
    $checkIP = execCommand('ip addr show | grep "192.168.0.50"');
    echo "  - IP 192.168.0.50: " . (!empty($checkIP['output']) ? "‚úÖ CONFIGUR√âE" : "‚ùå NON CONFIGUR√âE") . "\n";
    
    // Tests de connectivit√©
    echo "Tests HTTP:\n";
    
    // Test localhost
    $httpLocal = execCommand('curl -I -s http://localhost --connect-timeout 3');
    $localOK = strpos($httpLocal['output'], '200 OK') !== false || strpos($httpLocal['output'], '301') !== false;
    echo "  - http://localhost: " . ($localOK ? "‚úÖ OK" : "‚ùå KO") . "\n";
    
    if (!$localOK && !empty($httpLocal['output'])) {
        echo "    R√©ponse: " . trim(explode("\n", $httpLocal['output'])[0]) . "\n";
    }
    
    // Test 192.168.0.50 seulement si l'IP est configur√©e
    if (!empty($checkIP['output'])) {
        $httpIP = execCommand('curl -I -s http://192.168.0.50 --connect-timeout 3');
        $ipOK = strpos($httpIP['output'], '200 OK') !== false || strpos($httpIP['output'], '301') !== false;
        echo "  - http://192.168.0.50: " . ($ipOK ? "‚úÖ OK" : "‚ùå KO") . "\n";
        
        if (!$ipOK && !empty($httpIP['output'])) {
            echo "    R√©ponse: " . trim(explode("\n", $httpIP['output'])[0]) . "\n";
        }
    } else {
        $ipOK = false;
        echo "  - http://192.168.0.50: ‚ùå IP NON CONFIGUR√âE\n";
        echo "    üí° Configurer l\'IP dans Proxmox Web UI\n";
    }
    
    // Test du fichier index
    $indexTest = file_exists('/var/www/html/php/public/index.php');
    echo "  - Fichier index.php: " . ($indexTest ? "‚úÖ EXISTE" : "‚ùå MANQUANT") . "\n";
    
    $allOK = $nginxStatus['success'] && $phpStatus['success'] && $localOK;
    
    if ($allOK && !empty($checkIP['output'])) {
        echo "\nüéâ Serveur accessible sur:\n";
        echo "   - http://localhost/ (local)\n";
        if (!empty($checkIP['output'])) {
            echo "   - http://192.168.0.50/ (r√©seau)\n";
            echo "   - http://192.168.0.50:8080/ (todo list)\n";
        }
    }
    
    return [
        'success' => $allOK,
        'output' => "Services: " . ($nginxStatus['success'] && $phpStatus['success'] ? "‚úÖ" : "‚ùå") . 
                   ", HTTP local: " . ($localOK ? "‚úÖ" : "‚ùå") . 
                   ", HTTP IP: " . ($ipOK ? "‚úÖ" : "‚ùå")
    ];
}



?>
